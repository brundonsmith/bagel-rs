from './core.bgl' import { assert }

export const iter: <T>(x: readonly T[]) => Iterator<T> = ___iter
export const map: <T,R>(iter: Iterator<T>, fn: (el: T) => R) => Iterator<R> = ___map
export const reduce: <T, R>(iter: Iterator<T>, init: R, fn: (acc: R, el: T) => R) => R = ___reduce
export const filter: <T>(iter: Iterator<T>, fn: (el: T) => boolean) => Iterator<T> = ___filter
export const slice: <T>(iter: Iterator<T>, start: number, end?: number) => Iterator<T> = ___slice
export const takeWhile: <T>(iter: Iterator<T>, fn: (el: T) => boolean) => Iterator<T> = ___takeWhile
export const sorted: <T>(iter: Iterator<T>, fn: (a: T, b: T) => number) => Iterator<T> = ___sorted
export const every: <T>(iter: Iterator<T>, fn: (el: T) => boolean) => boolean = ___every
export const some: <T>(iter: Iterator<T>, fn: (el: T) => boolean) => boolean = ___some
export const count: <T>(iter: Iterator<T>) => number = ___count
export const first: <T>(iter: Iterator<T>) => T? = ___first 
export const concat: <T,R>(iter: Iterator<T>, other: Iterator<R>) => Iterator<T|R> = ___concat
export const zip: <T,R>(iter: Iterator<T>, other: Iterator<R>) => Iterator<[T?, R?]> = ___zip
export const indexed: <T>(iter: Iterator<T>) => Iterator<[T, number]> = ___indexed
export const repeat: <T>(val: T, count: number) => Iterator<T> = ___repeat
export const join: (iter: Iterator<string>, delimiter: string) => string = ___join

export pure func find<T>(iter: Iterator<T>, fn: (el: T) => boolean): T? =>
    iter.filter(fn).first()

export const collectArray: <T>(iter: Iterator<T>) => T[] = ___collectArray
export const collectObject: <K extends string, V>(iter: Iterator<[K, V]>) => {[K]: V} = ___collectObject

test expr 'count()' => assert([2, 4, 6, 8].iter().count() == 4)
test expr 'concat()' => assert(
    const arr = concat([2, 4].iter(), [6, 8].iter()).collectArray(),
    arr[0] == 2 &&
    arr[1] == 4 &&
    arr[2] == 6 &&
    arr[3] == 8
)
test expr 'zip()' => assert(
    const arr = zip([1, 2].iter(), [3, 4].iter()).collectArray(),
    arr[0]?.[0] == 1 &&
    arr[0]?.[1] == 3 &&
    arr[1]?.[0] == 2 &&
    arr[1]?.[1] == 4
)
test expr 'find()' => assert([2, 4, 6, 8].iter().find(n => n > 5) == 6)

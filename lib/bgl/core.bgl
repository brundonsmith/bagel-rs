
from 'https://raw.githubusercontent.com/brundonsmith/bagel/master/lib/ts/core.ts' import {
    iter as _iter,
    logf as _logf,
    memo as _memo,
    action as _action
}

export proc log(x: readonly unknown) |> {
    jsGlobal.console.log(x);
}

export func logf<T>(x: T): T => _logf(x)

export func iter<T>(x: readonly T[]): Iterator<T> => _iter(x)

export type MemoOptions = readonly {
    maxItems?: number
}

export func memo(options?: MemoOptions) => <
    TArgs extends readonly unknown[],
    TReturn
>(fn: (...args: TArgs) => readonly TReturn): (...args: TArgs) => readonly TReturn => _memo(fn, options)

export func action<
    TArgs extends readonly unknown[]
>(pr: (...args: TArgs) |> { }): (...args: TArgs) |> { } => _action(pr)

export func assert(condition: boolean, message?: string): Error<string?>? =>
    if condition {
        nil
    } else {
        Error(message)
    }

export type UnknownObject = {[string]: unknown} | (readonly {[string]: unknown})

type LintRuleName =
    | 'unnecessaryParens'
    | 'funcOrProcAsValue'
    | 'redundantConditional'
    | 'stringNumberConditional'
    | 'explicitBooleansOnly'
    | 'pureFunctions'

type LintRuleSeverity = 'error'|'warning'|'info'|'off'

export type BagelConfig = {
    platforms?: ('browser'|'node'|'deno')[],
    lintRules?: {[LintRuleName]: LintRuleSeverity}
}

export type Element = {
    tag: string,
    attributes: UnknownObject,
    children: unknown[]
}
from 'https://raw.githubusercontent.com/brundonsmith/bagel/master/lib/ts/core.ts' import { invalidate, WHOLE_OBJECT }

export proc push<T>(a: T[], el: T) |> {
    jsGlobal.Array.prototype.push.call(a, el);
    invalidate(a, WHOLE_OBJECT);
}
export proc unshift<T>(a: T[], el: T) |> {
    jsGlobal.Array.prototype.unshift.call(a, el);
    invalidate(a, WHOLE_OBJECT);
}
export proc pop<T>(a: T[]) |> {
    jsGlobal.Array.prototype.pop.call(a);
    invalidate(a, WHOLE_OBJECT);
}
export proc shift<T>(a: T[]) |> {
    jsGlobal.Array.prototype.shift.call(a);
    invalidate(a, WHOLE_OBJECT);
}
export proc splice<T>(a: T[], index: number, count?: number) |> {
    jsGlobal.Array.prototype.splice.call(a, index, count);
    invalidate(a, WHOLE_OBJECT);
}
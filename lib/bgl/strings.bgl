from 'https://raw.githubusercontent.com/brundonsmith/bagel/master/lib/ts/core.ts' import { iter }

export pure func includes(s: string, piece: string): boolean => jsGlobal.String.prototype.includes.call(s, piece)
export pure func startsWith(s: string, piece: string): boolean => jsGlobal.String.prototype.startsWith.call(s, piece)
export pure func endsWith(s: string, piece: string): boolean => jsGlobal.String.prototype.endsWith.call(s, piece)
export pure func substring(s: string, start: number, end?: number): string => jsGlobal.String.prototype.substring.call(s, start, end)
export pure func compare(s: string, other: string): number => jsGlobal.String.prototype.localeCompare.call(s, other)
export pure func repeat(s: string, count: number): string => jsGlobal.String.prototype.repeat.call(s, count)
export pure func replace(s: string, searchFor: string | RegExp, replaceWith: string): string => jsGlobal.String.prototype.replaceAll.call(s, searchFor, replaceWith)
export pure func toLowerCase(s: string): string => jsGlobal.String.prototype.toLocaleLowerCase.call(s)
export pure func toUpperCase(s: string): string => jsGlobal.String.prototype.toLocaleUpperCase.call(s)
export pure func trim(s: string): string => jsGlobal.String.prototype.trim.call(s)
export pure func trimStart(s: string): string => jsGlobal.String.prototype.trimStart.call(s)
export pure func trimEnd(s: string): string => jsGlobal.String.prototype.trimEnd.call(s)
export pure func padEnd(s: string, targetLength: number, padString: string): string => jsGlobal.String.prototype.padEnd.call(s, targetLength, padString)
export pure func padStart(s: string, targetLength: number, padString: string): string => jsGlobal.String.prototype.padStart.call(s, targetLength, padString)
export pure func split(s: string, sep: string | RegExp): Iterable<string> => iter(jsGlobal.String.prototype.split.call(s, sep))

export pure func indexOf(s: string, piece: string): number? =>
    const res = jsGlobal.String.prototype.indexOf.call(s, piece),
    if res == -1 {
        nil
    } else {
        res
    }

export pure func lastIndexOf(s: string, piece: string): number? =>
    const res = jsGlobal.String.prototype.lastIndexOf.call(s, piece),
    if res == -1 {
        nil
    } else {
        res
    }